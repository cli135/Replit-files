"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        // base case:\n        if (head == null) {\n            // beginning or end\n            // no cycles starting here\n            return false;\n        }\n        // any cycles here or later? if any, return true!\n        return isCycle(head, head.next) || hasCycle(head.next);\n    }\n    private boolean isCycle(ListNode node, ListNode runner) {\n        // head is guaranteed to not be null in hasCycle\n        // gotta check runner\n        if (runner == null) {\n            // no cycle here (starting at node)\n            return false;\n        }\n        // found a cycle!!\n        if (node == runner) {\n            return true;\n        }\n        // otherwise, keep on checking further down the line\n        // send runner farther\n        return isCycle(node, runner.next);\n    }\n}"