"class Solution {\n    public int chalkReplacer(int[] chalk, int k) {\n        // find the sum:\n        int sum = 0;\n        for (int num : chalk) {\n            sum += num;\n        }\n        return chalkReplacer(chalk, 0, k, sum);\n        /*\n        int n = chalk.length;\n        int i = 0;\n        // check enough chalk left\n        while (chalk[i] <= k) {\n            k -= chalk[i];\n            i++;\n            i %= n; // within mod n\n        }\n        return i;\n        */\n    }\n    private int chalkReplacer(int[] chalk, int i, int k, int sum) {\n        int before = ((i - 1) % (chalk.length) + chalk.length ) % chalk.length;\n        if (k < chalk[i] && k + chalk[before] >= chalk[i]) {\n            return i;\n        }\n        else if (sum <= k) {\n            return chalkReplacer(chalk, i % (chalk.length), k - sum, sum);\n        }\n        else if (chalk[i] <= k) {\n            // use the chalk\n            return chalkReplacer(chalk, (i + 1) % (chalk.length), k - chalk[i], sum);\n        }\n        else { // if (k < chalk[i]) {\n            return chalkReplacer(chalk, before, k + chalk[before], sum);\n        }\n    }\n}"