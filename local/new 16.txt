"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        // base case, return up the tree if we get to a nullptr place\n        if (root == nullptr) {\n            return root;\n        }\n        // go to bottom to trim in reverse\n        // and avoid 'jumping' over nodes (if we were to go forward)\n        trimBST(root->left, low, high);\n        trimBST(root->right, low, high);\n        // out of range, trim the tree here\n        if (root->val < low || high < root->val) {\n            // move up left if exists\n            if (root->left != nullptr) {\n                root->val = root->left->val;\n                root->right = root->left->right;\n                root->left = root->left->left; // do this last\n                // to keep your line of contact to old root->left\n                // until you're done\n            }\n            // move up right if exists\n            else if (root->right != nullptr) {\n                root->val = root->right->val;\n                root->left = root->right->left;\n                root->right = root->right->right; // do this last\n            }\n        }\n        return root;\n    }\n};"