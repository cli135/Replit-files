"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        // base case:\n        // finding idx of minimum of remaining values in lists\n        int minIdx = -1;\n        int minVal = Integer.MAX_VALUE;\n        for (int i = 0; i < lists.length; i++) {\n            if (lists[i] != null && lists[i].val < minVal) {\n                // dont forget to update minIdx\n                // AND minVal\n                minVal = lists[i].val;\n                minIdx = i;\n            }\n        }\n        if (minIdx == -1) {\n            return null; // end of merging process\n        }\n        \n        // recursive case:\n        // found minIdx\n        ListNode root = lists[minIdx];\n        // modify lists now...is this allowed lol\n        lists[minIdx] = lists[minIdx].next;\n        root.next = mergeKLists(lists);\n        return root;\n    }\n}"