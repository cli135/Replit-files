"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        // empty trees are symmetric\n        if (root == nullptr) {\n            return true;\n        }\n        \n        // recursive search, where left and right are mirrored-pointers on their respective sides\n        return compareMirrored(root->left, root->right);\n    }\n    bool compareMirrored(TreeNode* left, TreeNode* right) {\n        // Base case: these tip-of-branches are symmetric if both left and right are beyond-leaves\n        if (left == nullptr && right == nullptr) {\n            return true;\n        }\n        \n        // A discrepancy: only one is null ==> not symmetric tip-of-branches.\n        if (left == nullptr || right == nullptr) {\n            return false;\n        }\n        \n        // check values equal and check MIRRORED children are equal\n        // (right and left are compared)\n        return left->val == right->val && compareMirrored(left->left, right->right) && compareMirrored(left->right, right->left);\n    }\n};"